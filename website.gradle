import name.neuhalfen.concordion.transform.ConcordionHtmlToMarkdownTransformer

// Publishes the Concordion output to Github Pages
// https://github.com/ajoberstar/gradle-git-publish


task prepareSpecsForCMS(type: Copy, dependsOn: ['prepareCmsBuildRoot', 'test']) {
    description 'Transform the build output of concordion to include it in the CMS'

    from(fileTree("${specifications_prepareForCms_source}")) {
        include '**/*.html'
    }

    into(file("${specifications_prepareForCms_target}"))

    filter(ConcordionHtmlToMarkdownTransformer)
}

task removeOldCMSBuild(type: Delete) {
    delete "${specifications_cms_target}"
    delete "${cms_BuildRoot}"
}

task prepareCmsBuildRoot(type: Copy, dependsOn: ['removeOldCMSBuild']) {
    from("${specifications_cms_cmsdRoot}")
    into "${cms_BuildRoot}"
}



task generateWebsite(type: Exec, dependsOn: ['prepareSpecsForCMS']) {
    commandLine = [hugo, '--cleanDestinationDir', '--destination', "${specifications_cms_target}", '--enableGitInfo']
    workingDir = file("${cms_BuildRoot}")
}

task previewWebsite(type: Exec, dependsOn: ['generateWebsite']) {
    commandLine = [hugo, 'server', '--debug', '--watch', '--enableGitInfo']
    workingDir = file("${cms_BuildRoot}")
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'git@github.com:neuhalje/bouncy-gpg.git'
    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // generally, you don't need to touch this
    // repoDir = file("$buildDir/gitPublish")

    // what to publish, this is a standard CopySpec
    contents {
        from "${specifications_cms_target}"
    }

    // what to keep in the existing branch (include=keep)
    preserve {
        include '1.0.0/**'
        exclude '1.0.0/temp.txt'
    }

    // message used when committing changes
    commitMessage = 'Publishing github pages' // defaults to 'Generated by gradle-git-publish'
}

task publishWebsite(dependsOn: ['generateWebsite', 'gitPublishPush'])
